@page "/veiculos"
@using Newtonsoft.Json
@using OrcamentoVinil.Models
@using OrcamentoVinil.Pages.CustomComponentes
@using OrcamentoVinil.Util
@using RestSharp

<PageTitle>Veiculo</PageTitle>


<div class="row my-3">
    <div class="col-8">
        <h1>Veículo</h1>
    </div>
    <div class="col-4">
        <button class="btn btn-primary btn-block"></button>
    </div>
</div>
<div class="row no-gutters">
    <label>Marca:</label>
    <input class="form-control" />
</div>
<div class="mt-2 mb-2">
    <div class="row">
        <div class="row no-gutters col-8">
            <label>Modelo:</label>
            <input class="form-control" />
        </div>
        <div class="row no-gutters col-4 flex-grow-1 ms-1">
            <label>Ano:</label>
            <input class="form-control" />
        </div>
    </div>
</div>

@if (lstPecas == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (string pecaMaterial in lstPecas.Select(o => o.Descricao))
    {
        <div class="row no-gutters mt-1">
            <div class="rounded border p-3 mb-1 bg-white">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <input class="form-check-input mb-1" type="checkbox" checked>
                        <label class="ms-2" for="peca">@pecaMaterial</label>
                    </div>
                    <button class="btn btn-link flex-grow-1 text-end no-outline" @onclick="() => ToggleTableVisibility(pecaMaterial)">
                        @if (expandedTables.Contains(pecaMaterial))
                        {
                            <span class="oi oi-chevron-bottom"></span>
                        }
                        else
                        {
                            <span class="oi oi-chevron-right"></span>
                        }
                    </button>
                </div>


                @if (expandedTables.Contains(pecaMaterial))
                {
                    <table class="table mt-2">
                        <thead>
                            <tr>
                                <th>Material</th>
                                <th>Tamanho m²</th>
                                <th>Tamanho ml</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="col-8"><Autocomplete Items="@lstMateriaisAutocomplete" SelectedItemChanged="OnCountrySelected" /></td>
                                <td class="col-2"><input type="number" id="tamanhoM2" class="form-control" value="0" /></td>
                                <td class="col-2"><input type="number" id="tamanhoMl" class="form-control" value="0" /></td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>
        </div>
    }
}


@code {
    private HashSet<string> expandedTables = new HashSet<string>();
    private List<Veiculo>? lstVeiculos;
    private List<Peca>? lstPecas;
    private List<Material>? lstMateriais;
    private IEnumerable<string> lstMateriaisAutocomplete = new List<string>();

    protected override void OnInitialized()
    {
        BuscarPecas();
        BuscarMateriais();
        BuscarVeiculos();
        base.OnInitialized();
    }

    private async Task OnCountrySelected(string selected)
    {
        // selectedCountry = selected;
        //await Task.CompletedTask; // Você pode remover isso se não precisar de nenhuma lógica adicional aqui
    }

    private void ToggleTableVisibility(string pecaMaterial)
    {
        if (expandedTables.Contains(pecaMaterial))
        {
            expandedTables.Remove(pecaMaterial);
        }
        else
        {
            expandedTables.Add(pecaMaterial);
        }
    }

    private async void BuscarVeiculos()
    {
        var client = new RestClient(Constants.URL_BASE);
        var request = new RestRequest("/v1/Veiculo", Method.Get);
        request.AddHeader("accept", "*/*");

        RestResponse response = await client.ExecuteAsync(request);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            lstVeiculos = JsonConvert.DeserializeObject<List<Veiculo>>(response.Content).OrderByDescending(o => o.ID).ToList();
            StateHasChanged();
        }
    }

    private async void BuscarPecas()
    {
        var client = new RestClient(Constants.URL_BASE);
        var request = new RestRequest("//v1/Pecas", Method.Get);
        request.AddHeader("accept", "*/*");

        RestResponse response = await client.ExecuteAsync(request);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            lstPecas = JsonConvert.DeserializeObject<List<Peca>>(response.Content).OrderByDescending(o => o.ID).ToList();
            StateHasChanged();
        }
    }

    private async void BuscarMateriais()
    {
        var client = new RestClient(Constants.URL_BASE);
        var request = new RestRequest("//v1/Materiais", Method.Get);
        request.AddHeader("accept", "*/*");

        RestResponse response = await client.ExecuteAsync(request);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            lstMateriais = JsonConvert.DeserializeObject<List<Material>>(response.Content).OrderByDescending(o => o.ID).ToList();
            lstMateriaisAutocomplete = lstMateriais.Select(o => o.Descricao);
            StateHasChanged();
        }
    }
}
